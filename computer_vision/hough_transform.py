# -*- coding: utf-8 -*-
"""hough_transform.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A-2NcFeXnw0uvDt_IiBXk5fbBkhj58at
"""

#Nick Peters
#03/25/22
import numpy as np
import math
from PIL import Image
import pdb
import matplotlib.pyplot as plt
from PIL import Image, ImageFilter
import math
from scipy.ndimage import gaussian_filter

def find_max_rho(I):
    #step 1: find the max and min value for rho
    # find the maximum and minimum values of 'rho' so that in parameter space
    # we can iterate through those two limits: (rho-max and rho-min)
    # we knoow min and max value for 'theta':  (0,180)


    # normal form of line y*sin(theta) + x*cos(theta) = rho
    rho_min = 1000000; rho_max = -100000;
    I          = np.asarray(I)
    img_shape  = np.shape(I)
    img_height = img_shape[0]
    img_width  = img_shape[1]
    #print("height: ", img_height, " width: ", img_width)

    # for each 2D point (white pixels) compute the rho
    for y in range(img_height):
      for x in range(img_width):
          if (I[y,x] == 255):
            # try different angle in between 0 - 180 degree
            for ang in range(0, 181):
              theta = ang*math.pi/180;
              rho   = y*math.sin(theta) + x*math.cos(theta)
              if (rho < rho_min):
                  rho_min = rho

              if (rho > rho_max):
                  rho_max = rho

    return rho_min, rho_max



# hough transform algorithm
def hough_transform(I, rho_max, rho_min):
  I = np.asarray(I)
  img_shape = np.shape(I)
  img_height = img_shape[0]
  img_width = img_shape[1]
  h_array = np.zeros((181, int(rho_max-rho_min)))
  for y in range (img_height):
    for x in range (img_width):
      if (I[y,x] == 255):
        for ang in range (0, 181):
          theta = ang*math.pi/180
          rho = y*math.sin(theta) + x*math.cos(theta)
          h_array[ang, int(rho)] += 1

  return h_array


def thresholding(arr, rho_max):
  t = rho_max * .05
  threshold_arr = np.zeros((arr.shape[0], arr.shape[1]))
  for y in range(arr.shape[0]):
    for x in range(arr.shape[1]):
      if (arr[y,x] > t):
        threshold_arr[y,x] = arr[y,x]

  return threshold_arr


def find_max_val(arr):
  rho_max = 0.0; theta_max = 0.0
  max_val = -1000000
  for y in range(arr.shape[0]):
    for x in range(arr.shape[1]):
      if (arr[y,x] > max_val):
        max_val = arr[y,x]
        rho_max = x
        theta_max = y

  return rho_max, theta_max


if __name__ == "__main__":
    img_edges = Image.open('/content/drive/MyDrive/cs195_sp22/lab3_input_image/one_line_edge_points.png').convert('L')
    #plt.imshow(img_edges, cmap='gray') #image of 2d points on the line
    img_shape  = np.shape(img_edges)
    img_height = img_shape[0]
    img_width  = img_shape[1]
    print("height: ", img_height, " width: ", img_width)

    # find hough transform from the image edges
    rho_min, rho_max = find_max_rho(img_edges)
    print("rho_min: ", rho_min, " and rho_max: ", rho_max)
    hough_array = hough_transform(img_edges, rho_max, rho_min)
    plt.imshow(hough_array) #hough array of raw votes
    plt.title("Hough Space (raw votes)")
    filtered_array = gaussian_filter(hough_array, sigma=2)
    plt.imshow(filtered_array) #hough array with gaussian filter
    plt.title("Hough Space (gaussian smooth)")
    thresholded_array = thresholding(filtered_array, rho_max)
    largest_rho, largest_theta = find_max_val(thresholded_array)
    print("(ρest, θest): (",largest_rho,",",largest_theta,")")
    print("Value at (ρest, θest):",thresholded_array[largest_theta,largest_rho])
    plt.imshow(thresholded_array) #hough space smooth + threshold
    plt.title("Hough Space (smooth + threshold)")