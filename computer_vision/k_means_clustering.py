# -*- coding: utf-8 -*-
"""k-means clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dRVi7g6IBeSW4dBeklR4aC6eCaAzIiru
"""

#Nick Peters
#3/1/22
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

img = Image.open('/content/drive/MyDrive/cs195_sp22/lab2_input_image/horse.jpg')
img_matrix = [[0 for y in range(img.height)] for x in range(img.width)] #matrix for pixel ID's
k = 5 #clusters
img_centroid = [[0 for x in range(3)] for y in range(k)] #centroids

for j in range (k): #pick k random clusters
  random_x = np.random.randint(0,img.width-1)
  random_y = np.random.randint(0,img.height-1)
  img_centroid[j] = img.getpixel((random_x,random_y))

#repeat k-mean procedure
for i in range (100):
  #find closest cluster in RGB distance and record ID
  dist = [[0 for x in range(3)] for y in range(k)]
  for y in range (img.height):
    for x in range (img.width):

      for j in range(k):
        dist[j] = abs(np.subtract(img.getpixel((x,y)),img_centroid[j]))

      dist = np.array(dist)
      #dist_min = np.argmin(dist[:,2])
      img_matrix[x][y] = np.argmin(dist[:,2])

  #update centers with average of all assigned pixels
  for j in range(k):
    count = 0
    avg = [0 for x in range(3)]
    for y in range(img.height):
      for x in range(img.width):
        if (img_matrix[x][y] == j):
          count = count + 1
          avg = np.add(avg, img.getpixel((x,y)))

    avg = avg * (1/count)
    img_centroid[j] = avg

plt.figure(figsize=(8,8))
plt.imshow(img)
plt.title('Original Photo')

for j in range(k):
  color = ((np.random.randint(0,256),np.random.randint(0,256),np.random.randint(0,256)))
  for y in range(img.height):
    for x in range(img.width):
      if (img_matrix[x][y] == j):
        img.putpixel((x,y), color)

plt.figure(figsize=(8,8))
plt.imshow(img)
plt.title('k-means Segmented Photo')

